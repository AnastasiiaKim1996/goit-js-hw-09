{"mappings":"YAAA,IAAMA,EAAOC,SAASC,cAAc,SAC9BC,EAASF,SAASC,cAAc,oBAEnBF,EAAKE,cAAc,mBACpBF,EAAKE,cAAc,kBACjBF,EAAKE,cAAc,oBA+BvC,SAASE,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GActC,OADmB,IAAIC,SAXP,SAACC,EAASC,GACxBC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAGpBM,EAAO,CAAEP,WAAUC,YAGpBA,MAzCPH,EAAOW,iBAAiB,UAExB,SAAsBC,GACpBA,EAAMC,iBAQN,IANA,IAAMC,EAAOF,EAAMG,OAEbC,EAAaC,SAASH,EAAKX,MAAMe,OACjCC,EAAYF,SAASH,EAAKM,KAAKF,OAC/BG,EAAcJ,SAASH,EAAKQ,OAAOJ,OAEhCK,EAAW,EAAGA,EAAWF,EAAaE,GAAY,EAAG,CAG5DtB,EAAc,CAAEC,SAAAqB,EAAUpB,MAFZa,EAAaG,EAAYI,IAGpCC,MAAK,W,6DAAuB,GAApBtB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MACjBuB,OAAOC,QACL,6BAAgDC,OAAnB1B,EAAW,EAAE,QAAY0B,OAANzB,EAAM,UAGzD0B,OAAM,W,6DAAuB,GAApB3B,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MAClBuB,OAAOI,QACL,4BAA+CF,OAAnB1B,EAAW,EAAE,QAAY0B,OAANzB,EAAM,c","sources":["src/js/03-promises.js"],"sourcesContent":["const form = document.querySelector('.form');\nconst button = document.querySelector(\"[type ='submit']\");\n\nconst delayInput = form.querySelector(\"[name ='delay']\");\nconst stepInput = form.querySelector(\"[name ='step']\");\nconst amountInput = form.querySelector(\"[name ='amount']\");\n\nbutton.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\n\n  const form = event.target;\n\n  const delayValue = parseInt(form.delay.value);\n  const stepValue = parseInt(form.step.value);\n  const amountValue = parseInt(form.amount.value);\n\n  for (let position = 0; position < amountValue; position += 1) {\n    const delay = delayValue + stepValue * position;\n\n    createPromise({ position, delay })\n      .then(({ position, delay } = {}) => {\n        Notify.success(\n          `&#x2705 Fulfilled promise ${position + 1} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay } = {}) => {\n        Notify.failure(\n          `&#10060 Rejected promise ${position + 1} in ${delay}ms`\n        );\n      });\n  }\n}\n// debugger;\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  const promise = (resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n        // Fulfill\n      } else {\n        reject({ position, delay });\n        // Reject\n      }\n    }, delay);\n  };\n  const newPromise = new Promise(promise);\n  return newPromise;\n  // console.log(newPromise);\n}\n"],"names":["$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$button","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","event","preventDefault","form1","target","delayValue","parseInt","value","stepValue","step","amountValue","amount","position1","then","ref","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.5096bb83.js.map"}